h1. !{vertical-align:middle}https://github.com/arquillian/arquillian.github.com/raw/develop/images/arquillian_icon_64.png! Arquillian Website Source

This repository contains the source of the Arquillian website (hosted using "github pages":http://pages.github.com), to which the "arquillian.org":arquillian.org hostname resolves.

The website is built using "Awestruct":awestruct.org. The develop branch contains the unprocessed website source. From that content, Awestruct generates a static website under the @_site@ directory. The website is published to the public site by pushing the contents of the @_site@ directory to the master branch.

h2. Setting Up Awestruct

You need to have Awestruct installed on your machine to preview the website locally. Awestruct is a available as Ruby gem in the GemCutter repository. You can install it into either a native Ruby or a JRuby installation. The instructions here will cover setting up Awestruct in a native Ruby installation in Linux.

Begin by installing the package for Ruby and RubyGems.

h3. Installing Ruby and RubyGems on Ubuntu

If you have Ubuntu, use this command to install Ruby and RubyGems:

bc. $ sudo apt-get install rubygems

Ubuntu does not currently add the RubyGems bin directory to your path. Put the following files in your shell configuration file (.bashrc) and restart the shell.

bc. $ export GEM_HOME=/var/lib/gems/1.8 \ 
export PATH=$PATH:$GEM_HOME/bin

Now the executables for any gem you install will be available on your path.

h3. Installing Ruby and RubyGems on Fedora

If you have Fedora, use this command to install Ruby:

bc. $ sudo yum install ruby ruby-devel ruby-libs ruby-mode ruby-rdoc ruby-irb ruby-ri ruby-docs ruby-mysql ruby-sqlite3

You then need to install RubyGems manually:

bc.. $ wget -q http://rubyforge.org/frs/download.php/55066/rubygems-1.3.2.tgz \
tar xzf rubygems-1.3.2.tgz \
cd rubygems-1.3.2 \
sudo ruby setup.rb

p. If you get stuck, refer to "this guide":http://www.technetra.com/2009/04/22/howto-setting-up-ruby-on-rails-for-fedora-10-and-11 for more details.

h3. Installing the Awestruct Gem

Now you are ready to install the awestruct gem and it's dependencies. The remainder of the commands work on any Ruby installation:

bc. $ sudo gem install awestruct

You're all set!

h3. Other Required Gems

As the website matures, more gems will be required. This section documents the required third-party gems not already installed by Awestruct.

* rest-client
* git
* json (if using jruby)
* jruby-openssl (if using jruby)

h2. Previewing the Site Locally

Now that you have awestruct installed, you can preview the website locally by running it in development mode. Development mode uses a file monitor to automatically update the site when you make a change to the source files.

Run the following command to launch the preview server:

bc. awestruct -d

Visit the following page in your browser:

"http://localhost:4242":http://localhost:4242

You're now awestruct!

If you only want to generate once when you start the server, use this command:

bc. awestruct --server -P development

Add the @--force@ flag to either command to regenerate the site from scratch.

h2. Conventions

"Haml":http://haml-lang.com is the preferred abstract HTML markup language.

* "Haml Reference":http://haml-lang.com/docs/yardoc/file.HAML_REFERENCE.html

 "Textile":http://redcloth.org/textile is the preferred text markup language.

* "Textile Reference":http://redcloth.org/textile

"Sass":http://sass-lang.com and "Compass":http://compass-style.org are the preferred CSS frameworks.

* "Sass Reference":http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html
* "Compass Reference":http://compass-style.org/reference/compass

Source files are indented using 2 spaces. Haml files require the same indentation size throughout. Ruby hashes should have no leading or trailing spaces and options such be seperated by a comma followed by a space (e.g., @{:href=>"http://arquillian.org", title=>"Arquillian Project Site"}@).

Note: In a HAML document, if you use the equals seperator (=) rather than a greater than equals (=>) in a hash key-value assignment, Awestruct will crash.

h2. Page structure

* #banner
** h2#logo
** #navigation
* #main
** #feature
*** h1
** #content
*** .post
**** .header
***** h2.title
***** .byline
**** .body
**** .footer
** #sidebar
* #footer

h2. Writing a Blog Entry

Writing a blog entry is very easy. All you have to do is fill in a brief prolog at the top of the file, then just type your content. The rest is handled for you.

h3. Filename

To write a blog entry, create a new textile document with the file extension .textile in the blog/ folder. The name of the file is important. It determines the date of the blog entry and the URL. The syntax is:

bq. YYYY-MM-DD-URL.textile

You cannot use dots or spaces in the URL segment.

For example:

bq. 2011-10-02-announcing-arquillian-1-0.textile

h3. Prolog

The prolog is a set of name/value pairs defined at the top of the file in between two lines containing three dashes. In this section you define the following metadata:

* layout (always "blog")
* title (use sentence capitalization)
* author
* tags (array structure, limit to 5, use singular forms as in "release")

Here's an example (refer to HTML output):

pre. ---
layout: blog
title: Announcing Arquillian 1.0!
author: Aslak Knutsen
tags: [ announcements, releases ]
--- << only copy the hyphens and the lines of text between them

h3. Content

Below the prolog, you just type in textile format.

h3. Code

To insert syntax highlighted code, followed by paragraph text, use the following syntax (refer to HTML output of this guide):

pre. bc(prettify).. public class Alien {
    public String getName() {
        return "Ike";
    }
}

pre. p. This sentence will appear below the code.

You don't normally need to use the p. prefix to enter a paragrah. However, it's required after a code block to indicate to the parser that the code snippet has ended. If the content following the code is not paragraph text (for instance, a list item), use notextile. instead of p., but include one space at the end of the line.

The language is detected automatically.

If you are running awestruct in preview mode, you need to touch the blog/index.html.haml file to see the blog show up in the index (likely a bug).

h3. Images

Images should be put in the images/blog/ folder. An image should be no more than 550px wide.

h2. Writing a Guide

Writing a guide is much like writing a blog entry (and, as such, just as easy). You need to supply some prolog information, a header stating what the guide covers and content partitioned using level 3 (h3) headings. The rest is handled for you, including the table of contents and listing in the index.

h3. Filename

To write a blog entry, create a new textile document with the file extension .textile in the guides/ folder. The name of the file will become the last path in the guide's URL and thus should closely match the guide's title. Since it's part of the URL, the filename should not contain spaces.

h3. Prolog

The prolog is a set of name/value pairs defined at the top of the file in between two lines containing three dashes. In this section you define the following metadata:

* layout (always "guide")
* title (use title capitalization)
* authors (comma seperated list of original authors of the guide)
* guide_summary (summary text to be used in the guide index)
* guide_group (numeric; 1 = beginner, 2 = intermediate, 3 = advanced)

Here's an example (refer to HTML output):

pre. ---
layout: guide
title: Getting Started
authors: [Dan Allen]
guide_summary: Learn how to add Arquillian to the test suite of your project and write your first Arquillian test.
guide_group: 1
--- << only copy the hyphens and the lines of text between them

h3. Content

Below the prolog, you type in textile format.

You should begin each guide with a level 2 (h2) heading that references the page title followed by a section that details the lessons covered in the guide. The level 2 heading and lessons sections should be surrounded in a @<div class="header">@ for styling reasons.

The remainder of the content should be divided into level 3 (h3) headings. The heading title should be no more than 20 characters and use title capitalization.

The final line should be:

pre. h3. Share the Knowledge

Note: We'll eventually remove this requirement.

h3. Code

Refer to the instruction for writing a blog entry to learn how to enter code.

h3. Images

Images should be put in the images/guides/ folder.

h2. TODO

* float reference section in guide index popup to right
* last published date for website (footer or header)
* incorporate Max's changes to getting started guide
** link to why not to use javaee-api faq in getting started guide
* edit Duke's Choice Award blog
* contributors
** tally contributions
** sort by contributions, # of followers or last commit (something other than alpha)
* activate intense debate comments into blog (and perhaps guides)
* link Invasion Team images to github, jboss community, twitter, etc (bigger pictures?)
** see contributions page
* fix layout on community page (like torquebox.org/community)
** probably need to redo the screenshots
* blog for 1.0 release
* l&f of module pages (versions & version matrix, contributor grid) (partially done)
* FAQ?
* links to migration guides? perhaps on core module page? or release blogs?
* download & maven coordinates (perhaps on module pages)
* float module info in release blog to right
* google analytics setup (pending aslak commit)
* list contributors to guide by reading authors from git reflog
* share buttons in footer
* finish porting blogs (see blog-entries-to-port.txt)
* guides
** rinse and repeat (getting started part 2)
** running showcase examples
** arquillian forge plugin (lincoln or paul)
** use container adapter standalone 
** how to build Arquillian
* add "Release Date" as part of "Latest Release"
* tutorial versions? (best to do it by major arquillian release)
* code section
** latest JIRA issues added/fixed/updated (stream is done, could still use work)
** latest commits
** ohloh "I Use This" badge?
** contribute guide (like http://seamframework.org/Seam3/Contribute)
* Sarah
** compass sprites, how to do them, start creating
** Don't mock me. Write Real Tests. on home page
** Latest release badge (western badge, rodeo ike)
** make slideshow frame wider on home page (~1000px...for code sample, use callouts for each annotation)
** font colors in general, colors of callouts in guide

h2. To fix

* remove hard-coded styles in features.html.haml
* cleanup images, make naming consistent
* why does community/contributors use contributors[1]?
* double save to preview page problem (GitHub extension takes too long to run, messing up web server; need to check if generation is necessary)
* get rid of "bp" class on body
* find way to remove duplicate markup for blog index and entry
* remove inline CSS hacks
* JBoss Community button needs to be better integrated. is it an action?
* reenable sassy-buttons when awestruct can use compass 0.11
* can't get filename block to overlap code block
* make interwiki syntax more concise, if possible (currently "ARQ-100":issue://ARQ-100)
* bullets in blockquote not supported by textile, workaround is ugly
* can't use "API" in guide header

h2. Nice to have

* documentation for extensions (like the lanyrd extension)
* collapse events from same event on home page event feed
* polish guide names
* show tags in guides (guide tag cloud?)
* selenium server image in drone tutorial
* Blog page title should use prefix "Arquillian Blog | "
* latest site updates based on commits to arquillian.github.com front-matter files
* license page like sproutcore

h2. Considering

* add background-color on the directory listing in guides?
* could do div(filename). %src/test/java/MyTest.java%
* tabs for features
* mention jboss testing guild?

h2. Awestruct Requests

* tag group calculation divide by 0 fix in tagger.rb (patch sent)
* use :no_span_caps in RedCloth (or honor config option in pipeline)
* upgrade to compass 0.11
* compass image-url function is not resolving properly
* setup textile so it can be extended w/ custom tags
* blog index & home page does not refresh after writing new blog entry (need to touch files)

h2. Extension Ideas

* materialize cdn javascript to _site/javascripts and rewrite src url
* Nobles extension from config
* interwiki links (like JIRA, Github resource, etc)
* ohloh widget
* Mode to just execute extensions pipeline, then stop (no generation)

h2. Extensions to Contribute

* Events from lanyrd (search website & process into site.sessions)
* Guides similar to the Posts extension
* Fork me on github ribbon

h2. Resources

* Preview site: http://arqpreview-alrubinger.rhcloud.com/
* Currently using Google Prettify, could use "jQuery wrapper":http://balupton.github.com/jquery-syntaxhighlighter
* Icons from Faenza Gnome icon theme
* A pure CSS sticky footer technique: http://ryanfait.com/sticky-footer/
